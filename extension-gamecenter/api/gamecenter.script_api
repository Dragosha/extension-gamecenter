- name: push
  type: table 
  desc: Functions and constants for interacting with local, as well as
        Apple''s and Google''s push notification services. These API's only exist on mobile
        platforms.
        [icon:ios] [icon:android]
  members:

#*****************************************************************************************************

  - name: register
    type: function
    desc: Send a request for push notifications. Note that the notifications table
          parameter is iOS only and will be ignored on Android.
    
    parameters:
    - desc: The types of notifications to listen to. [icon:ios]
      name: notifications
      type: table
    - desc: Register callback function.
      name: callback
      type: function
      parameters:
      - name: self
        type: object
        desc: The current object.

      - name: token
        type: string
        desc: The returned push token if registration is successful.

      - name: error
        type: table
        desc: A table containing eventual error information.

    examples:
    - desc: |-
            Register for push notifications on iOS. Note that the token needs to be converted on this platform.
            ```lua
            local function push_listener(self, payload, origin)
                 -- The payload arrives here.
            end

            function init(self)
                 local alerts = {push.NOTIFICATION_BADGE, push.NOTIFICATION_SOUND, push.NOTIFICATION_ALERT}
                 push.register(alerts, function (self, token, error)
                 if token then
                      -- NOTE: %02x to pad byte with leading zero
                      local token_string = ""
                      for i = 1,#token do
                          token_string = token_string .. string.format("%02x", string.byte(token, i))
                      end
                      print(token_string)
                      push.set_listener(push_listener)
                 else
                      -- Push registration failed.
                      print(error.error)
                 end
            end
            ```

            Register for push notifications on Android.

            ```lua
            local function push_listener(self, payload, origin)
                 -- The payload arrives here.
            end

            function init(self)
                 push.register({}, function (self, token, error)
                     if token then
                          print(token)
                          push.set_listener(push_listener)
                     else
                          -- Push registration failed.
                          print(error.error)
                     end
                end)
            end
            ```
    

#*****************************************************************************************************

  - name: set_listener
    type: function
    desc: Sets a listener function to listen to push notifications.
    
    parameters:
    - name: listener
      type: function
      desc: Listener callback function.
      parameters:
      - name: self
        type: object
        desc: The current object.

      - name: payload
        type: table
        desc: The push payload

      - name: origin
        type: constant
        desc: Origin of the push that can be one of the predefined constants below

              - `push.ORIGIN_LOCAL`

              - `push.ORIGIN_REMOTE`

      - name: activated
        type: boolean
        desc: If the application was activated via the notification.

    examples:
    - desc: |-
            Set the push notification listener.
            ```lua
            local function push_listener(self, payload, origin, activated)
                 -- The payload arrives here.
                 pprint(payload)
                 if origin == push.ORIGIN_LOCAL then
                     -- This was a local push
                     ...
                 end

                 if origin == push.ORIGIN_REMOTE then
                     -- This was a remote push
                     ...
                 end
            end

            local init(self)
                 ...
                 -- Assuming that push.register() has been successfully called earlier
                 push.set_listener(push_listener)
            end
            ```

#*****************************************************************************************************

  - name: set_badge_count
    type: function
    desc: Set the badge count for application icon.
          This function is only available on iOS. [icon:ios]
    
    parameters:
    - name: count
      type: number
      desc: Badge count
      
    

#*****************************************************************************************************

  - name: schedule
    type: function
    desc: Local push notifications are scheduled with this function.
          
          The returned `id` value is uniquely identifying the scheduled notification
          and can be stored for later reference.

    parameters:
    - name: time
      type: number
      desc: Number of seconds into the future until the notification should be triggered.
      

    - name: title
      type: string
      desc: Localized title to be displayed to the user if the application is not
            running.
      
    - name: alert
      type: string
      desc: Localized body message of the notification to be displayed to the user
            if the application is not running.
      

    - name: payload
      type: string
      desc: JSON string to be passed to the registered listener function.
      

    - name: notification_settings
      type: table
      desc: Table with notification and platform specific fields
      members:
      - name: action
        type: string
        desc: The alert action string to be used as the title of the right button
              of the alert or the value of the unlock slider, where the value replaces
              "unlock" in "slide to unlock" text. [icon:ios]

      - name: badge_count
        type: number
        desc: The numeric value of the icon badge. [icon:ios]

      - name: priority
        type: number
        desc: The priority is a hint to the device UI about how the notification should be 
              displayed. There are five priority levels, from -2 to 2 where -1 is the lowest
              priority and 2 the highest. Unless specified, a default priority level of 2 is used.
              [icon:android]
      

    returns:
    - type: number 
      desc: Unique id that can be used to cancel or inspect the notification
      

    - type: string
      desc: Error string if something went wrong, otherwise nil

    examples:
    - desc: |-
            This example demonstrates how to schedule a local notification:
            ```lua
            -- Schedule a local push in 3 seconds
            local payload = '{ "data" : { "field" : "Some value", "field2" : "Other value" } }'
            id, err = push.schedule(3, "Update!", "There are new stuff in the app", payload, { action = "check it out" })
            if err then
                 -- Something went wrong
                 ...
            end
            ```

#*****************************************************************************************************

  - name: cancel
    type: function
    desc: Use this function to cancel a previously scheduled local push notification.

          The notification is identified by a numeric id as returned by `push.schedule()`.
    
    parameters:
    - name: id
      type: number
      desc: The numeric id of the local push notification
      

#*****************************************************************************************************

  - name: get_scheduled
    type: function
    desc: Returns a table with all data associated with a specified local push notification.

          The notification is identified by a numeric id as returned by `push.schedule()`.
    
    parameters:
    - desc: The numeric id of the local push notification.
      name: id
      type: number

    returns:
    - desc: Table with all data associated with the notification.
      type: table

#*****************************************************************************************************

  - name: get_all_scheduled
    type: function
    desc: Returns a table with all data associated with all scheduled local push
          notifications.

          The table contains key, value pairs where the key is the push notification id
          and the value is a table with the notification data, corresponding to the data given
          by `push.get_scheduled(id)`.

    returns:
    - desc: Table with all data associated with all scheduled notifications.
      type: table

#*****************************************************************************************************

  - name: NOTIFICATION_BADGE
    type: number
    desc: Badge notification type.
    

  - name: NOTIFICATION_SOUND
    type: number
    desc: Sound notification type.
    

  - name: NOTIFICATION_ALERT
    type: number
    desc: Alert notification type.
    

  - name: ORIGIN_LOCAL
    type: number
    desc: Local push origin.
    

  - name: ORIGIN_REMOTE
    type: number
    desc: Remote push origin.
    

  - name: PRIORITY_MIN
    type: number
    desc: This priority is for items might not be shown to the user except under special
          circumstances, such as detailed notification logs. Only available on Android.
          [icon:android]
    
  - name: PRIORITY_LOW
    type: number
    desc: Priority for items that are less important. Only available on Android. [icon:android]
    

  - name: PRIORITY_DEFAULT
    type: number
    desc: The default notification priority. Only available on Android. [icon:android]

  - name: PRIORITY_HIGH
    type: number 
    desc: Priority for more important notifications or alerts. Only available on Android.
          [icon:android]
    
  - name: PRIORITY_MAX
    type: number
    desc: Set this priority for your application's most important items that require
          the user's prompt attention or input. Only available on Android. [icon:android]
